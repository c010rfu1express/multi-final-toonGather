<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multi.toonGather.social.model.mapper.SocialMapper">

    <resultMap id="reviewResultMap" type="reviewDTO">
        <id property="reviewNo" column="review_no"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="starRating" column="star_rating"/>
        <result property="createdDate" column="created_date"/>
        <result property="modifiedDate" column="modified_date"/>
        <result property="viewCnt" column="view_cnt"/>
        <result property="likeCount" column="like_count"/>
        <association property="writer" javaType="userDTO">
            <id property="userNo" column="user_no"/>
            <result property="userId" column="user_id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImagePath" column="profile_image_path"/>
        </association>
        <association property="webtoon" javaType="com.multi.toonGather.webtoon.model.dto.WebtoonDTO">
            <id property="webtoon_no" column="webtoon_no"/>
            <result property="webtoon_id" column="webtoon_id"/>
            <result property="platform" column="platform"/>
            <result property="webtoon_name" column="webtoon_name"/>
            <result property="author" column="author"/>
            <result property="thumbnail_url" column="thumbnail_url"/>
            <result property="genre" column="genre"/>
            <result property="tags" column="tags"/>
        </association>
    </resultMap>
    <resultMap id="reviewLikeResultMap" type="reviewLikeDTO">
        <id property="likeNo" column="like_no"/>
        <result property="reviewNo" column="review_no"/>
        <result property="likedUser" column="liked_user"/>
        <result property="likedDate" column="liked_date"/>
    </resultMap>

    <resultMap id="diaryResultMap" type="diaryDTO">
        <id property="diaryNo" column="diary_no"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="statusCode" column="status_code"/>
        <result property="createdDate" column="created_date"/>
        <result property="modifiedDate" column="modified_date"/>
        <result property="viewCnt" column="view_cnt"/>
        <result property="commentCount" column="comment_count"/>
        <association property="writer" javaType="userDTO">
            <id property="userNo" column="user_no"/>
            <result property="userId" column="user_id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImagePath" column="profile_image_path"/>
        </association>
        <association property="webtoon" javaType="com.multi.toonGather.webtoon.model.dto.WebtoonDTO">
            <id property="webtoon_no" column="webtoon_no"/>
            <result property="webtoon_id" column="webtoon_id"/>
            <result property="platform" column="platform"/>
            <result property="webtoon_name" column="webtoon_name"/>
            <result property="author" column="author"/>
            <result property="thumbnail_url" column="thumbnail_url"/>
            <result property="genre" column="genre"/>
            <result property="tags" column="tags"/>
        </association>
    </resultMap>
    <resultMap id="diaryCommentResultMap" type="diaryCommentDTO">
        <id property="commentNo" column="comment_no"/>
        <result property="diaryNo" column="diary_no"/>
        <result property="content" column="content"/>
        <result property="createdDate" column="created_date"/>
        <association property="commenter" javaType="userDTO">
            <id property="userNo" column="user_no"/>
            <result property="userId" column="user_id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImagePath" column="profile_image_path"/>
        </association>
    </resultMap>

    <resultMap id="activityResultMap" type="activityDTO">
        <result property="activityType" column="activity_type"/>
        <result property="activityDate" column="activity_date"/>
        <association property="writer" javaType="userDTO">
            <id property="userNo" column="user_no"/>
            <result property="userId" column="user_id"/>
            <result property="nickname" column="nickname"/>
        </association>
        <association property="review" javaType="reviewDTO">
            <id property="reviewNo" column="review_no"/>
            <result property="title" column="review_title"/>
        </association>
        <association property="diary" javaType="diaryDTO">
            <id property="diaryNo" column="diary_no"/>
            <result property="title" column="diary_title"/>
            <result property="content" column="diary_content"/>
            <result property="statusCode" column="diary_status_code"/>
        </association>
        <association property="webtoon" javaType="com.multi.toonGather.webtoon.model.dto.WebtoonDTO">
            <id property="webtoon_no" column="webtoon_no"/>
            <result property="webtoon_id" column="webtoon_id"/>
            <result property="platform" column="platform"/>
            <result property="webtoon_name" column="webtoon_name"/>
            <result property="author" column="author"/>
            <result property="thumbnail_url" column="thumbnail_url"/>
            <result property="genre" column="genre"/>
            <result property="tags" column="tags"/>
        </association>
    </resultMap>

    <!-- 지금 핫한 리뷰: 조회수(0.3 가중치), 좋아요수(0.5 가중치), 작성일 추가점수  7일 이내(100점), 30일 이내(50점), 그 외(10점) -->
    <select id="selectPopularReviews" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        (SELECT COUNT(*) FROM so_review_likes WHERE review_no = r.review_no) as like_count,
        (
        (r.view_cnt * 0.3) +
        ((SELECT COUNT(*) FROM so_review_likes WHERE review_no = r.review_no) * 0.5) +
        (CASE
        WHEN r.created_date >= DATE_SUB(NOW(), INTERVAL 7 DAY) THEN 100
        WHEN r.created_date >= DATE_SUB(NOW(), INTERVAL 30 DAY) THEN 50
        ELSE 10
        END)
        ) as popularity_score
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE r.created_date
        ORDER BY popularity_score DESC
        LIMIT #{limit}
    </select>

    <!-- 검색 -->
    <select id="searchReviews" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE r.title LIKE CONCAT('%', #{keyword}, '%') OR r.content LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY r.created_date DESC
        LIMIT #{offset}, #{limit}
    </select>
    <select id="searchDiaries" resultMap="diaryResultMap">
        SELECT d.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_diary d
        JOIN users u ON d.writer_no = u.user_no
        JOIN webtoon w ON d.webtoon_no = w.webtoon_no
        WHERE d.title LIKE CONCAT('%', #{keyword}, '%') OR d.content LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY d.created_date DESC
        LIMIT #{offset}, #{limit}
    </select>
    <!-- 사용자 검색 쿼리 -->
    <select id="searchUsers" resultType="userDTO">
        SELECT
        user_no AS userNo,
        user_id AS userId,
        nickname,
        profile_image_path AS profileImagePath,
        bio
        FROM users
        WHERE user_id LIKE CONCAT('%', #{keyword}, '%')
        OR nickname LIKE CONCAT('%', #{keyword}, '%')
        OR bio LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY
        CASE
        WHEN user_id = #{keyword} THEN 1
        WHEN nickname = #{keyword} THEN 2
        ELSE 3
        END,
        user_id ASC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 사용자 정보 조회 -->
    <select id="selectUserProfile" resultType="userDTO">
        SELECT
        user_no AS userNo,
        type_code AS typeCode,
        auth_code AS authCode,
        user_id AS userId,
        password,
        nickname,
        contact_number AS contactNumber,
        email,
        profile_image_path AS profileImagePath,
        bio,
        gender,
        date_of_birth AS dateOfBirth,
        real_name AS realName,
        terms_agreement AS termsAgreement,
        terms_agreement_datetime AS termsAgreementDatetime,
        registration_datetime AS registrationDatetime,
        last_modified_datetime AS lastModifiedDatetime
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자별 최애 웹툰 조회 -->
    <select id="selectFavoriteWebtoons" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE u.user_id = #{userId} AND r.star_rating = 5
        ORDER BY r.created_date DESC
    </select>

    <!-- 사용자별 인기 리뷰 조회 -->
    <select id="selectPopularReviewsByUser" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        (SELECT COUNT(*) FROM so_review_likes WHERE review_no = r.review_no) as like_count
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE u.user_id = #{userId}
        ORDER BY like_count DESC
        LIMIT #{limit}
    </select>

    <!-- 사용자별 최근 활동 조회 -->
    <select id="selectRecentActivities" resultMap="activityResultMap">
        SELECT * FROM (
        SELECT 'REVIEW_LIKE' as activity_type, rl.liked_date as activity_date,
        r.review_no, r.title as review_title, u.user_no, u.nickname,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        NULL as diary_no, NULL as diary_title, NULL as diary_content, NULL as diary_status_code
        FROM so_review_likes rl
        JOIN so_review r ON rl.review_no = r.review_no
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE rl.liked_user = (SELECT user_no FROM users WHERE user_id = #{userId})
        UNION ALL
        SELECT 'DIARY_COMMENT' as activity_type, dc.created_date as activity_date,
        NULL as review_no, NULL as review_title, u.user_no, u.nickname,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        d.diary_no, d.title as diary_title, d.content as diary_content, d.status_code as diary_status_code
        FROM so_diary_comments dc
        JOIN so_diary d ON dc.diary_no = d.diary_no
        JOIN users u ON d.writer_no = u.user_no
        JOIN webtoon w ON d.webtoon_no = w.webtoon_no
        WHERE dc.commenter_no = (SELECT user_no FROM users WHERE user_id = #{userId})
        UNION ALL
        SELECT 'REVIEW_CREATE' as activity_type, r.created_date as activity_date,
        r.review_no, r.title as review_title, u.user_no, u.nickname,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        NULL as diary_no, NULL as diary_title, NULL as diary_content, NULL as diary_status_code
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE r.writer_no = (SELECT user_no FROM users WHERE user_id = #{userId})
        UNION ALL
        SELECT 'DIARY_CREATE' as activity_type, d.created_date as activity_date,
        NULL as review_no, NULL as review_title, u.user_no, u.nickname,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        d.diary_no, d.title as diary_title, d.content as diary_content, d.status_code as diary_status_code
        FROM so_diary d
        JOIN users u ON d.writer_no = u.user_no
        JOIN webtoon w ON d.webtoon_no = w.webtoon_no
        WHERE d.writer_no = (SELECT user_no FROM users WHERE user_id = #{userId})
        ) AS activities
        ORDER BY activity_date DESC
        LIMIT #{limit}
    </select>

    <!-- 팔로우 -->
    <insert id="insertFollow">
        INSERT INTO so_follow (follower_no, following_no)
        VALUES (#{followerNo}, #{followingNo})
    </insert>
    <delete id="deleteFollow">
        DELETE FROM so_follow
        WHERE follower_no = #{followerNo} AND following_no = #{followingNo}
    </delete>
    <select id="isFollowing" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM so_follow
        WHERE follower_no = #{followerNo} AND following_no = #{followingNo}
    </select>
    <select id="selectFollowingUsers" resultType="userDTO">
        SELECT
        user_no AS userNo,
        type_code AS typeCode,
        auth_code AS authCode,
        user_id AS userId,
        password,
        nickname,
        contact_number AS contactNumber,
        email,
        profile_image_path AS profileImagePath,
        bio,
        gender,
        date_of_birth AS dateOfBirth,
        real_name AS realName,
        terms_agreement AS termsAgreement,
        terms_agreement_datetime AS termsAgreementDatetime,
        registration_datetime AS registrationDatetime,
        last_modified_datetime AS lastModifiedDatetime
        FROM users u
        JOIN so_follow f ON u.user_no = f.following_no
        WHERE f.follower_no = #{userNo}
    </select>

    <!-- 사용자별 리뷰 목록 조회 -->
    <select id="selectReviewsByUserId" parameterType="map" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE u.user_id = #{userId}
        ORDER BY r.created_date DESC
        LIMIT #{pageDTO.start}, 10
    </select>

    <!-- 사용자별 리뷰 개수 조회 -->
    <select id="selectReviewCountByUserId" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        WHERE u.user_id = #{userId}
    </select>

    <!-- 리뷰 상세 조회 -->
    <select id="selectReviewByNo" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        (SELECT COUNT(*) FROM so_review_likes WHERE review_no = r.review_no) as like_count
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE r.review_no = #{reviewNo}
    </select>
    <!-- 리뷰 상세 조회: 조회수 증가 -->
    <update id="incrementReviewViewCount">
        UPDATE so_review
        SET view_cnt = view_cnt + 1
        WHERE review_no = #{reviewNo}
    </update>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="reviewDTO">
        UPDATE so_review
        SET title = #{title},
        content = #{content},
        star_rating = #{starRating},
        modified_date = NOW()
        WHERE review_no = #{reviewNo}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        DELETE FROM so_review
        WHERE review_no = #{reviewNo}
    </delete>

    <!-- 리뷰 좋아요 -->
    <select id="selectReviewLike" resultMap="reviewLikeResultMap">
        SELECT * FROM so_review_likes
        WHERE review_no = #{reviewNo} AND liked_user = #{userNo}
        LIMIT 1
    </select>
    <insert id="insertReviewLike">
        INSERT INTO so_review_likes (review_no, liked_user)
        VALUES (#{reviewNo}, #{userNo})
    </insert>
    <delete id="deleteReviewLike" parameterType="int">
        DELETE FROM so_review_likes
        WHERE review_no = #{reviewNo} AND liked_user = #{userNo}
    </delete>

    <!-- 리뷰/다이어리 작성 웹툰 정보 -->
    <select id="selectWebtoonByNo" resultType="com.multi.toonGather.webtoon.model.dto.WebtoonDTO">
        SELECT * FROM webtoon WHERE webtoon_no = #{webtoonNo}
    </select>

    <!-- 리뷰 작성 -->
    <insert id="createReview" parameterType="reviewDTO" useGeneratedKeys="true" keyProperty="reviewNo">
        INSERT INTO so_review (writer_no, webtoon_no, title, content, star_rating)
        VALUES (#{writer.userNo}, #{webtoon.webtoon_no}, #{title}, #{content}, #{starRating})
    </insert>
    <select id="selectReviewByUserAndWebtoon" resultMap="reviewResultMap">
        SELECT r.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_review r
        JOIN users u ON r.writer_no = u.user_no
        JOIN webtoon w ON r.webtoon_no = w.webtoon_no
        WHERE r.writer_no = #{userNo} AND r.webtoon_no = #{webtoonNo}
        LIMIT 1
    </select>

    <!-- 다이어리 작성 -->
    <insert id="createDiary" parameterType="diaryDTO" useGeneratedKeys="true" keyProperty="diaryNo">
        INSERT INTO so_diary (writer_no, webtoon_no, title, content, status_code)
        VALUES (#{writer.userNo}, #{webtoon.webtoon_no}, #{title}, #{content}, #{statusCode})
    </insert>

    <!-- 사용자별 다이어리 목록 조회 -->
    <select id="selectDiariesByUserId" parameterType="map" resultMap="diaryResultMap">
        SELECT d.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags
        FROM so_diary d
        JOIN users u ON d.writer_no = u.user_no
        JOIN webtoon w ON d.webtoon_no = w.webtoon_no
        WHERE u.user_id = #{userId}
        ORDER BY d.created_date DESC
        LIMIT #{pageDTO.start}, 10
    </select>

    <!-- 사용자별 다이어리 개수 조회 -->
    <select id="selectDiaryCountByUserId" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM so_diary d
        JOIN users u ON d.writer_no = u.user_no
        WHERE u.user_id = #{userId}
    </select>

    <!-- 다이어리 상세 조회 -->
    <select id="selectDiaryByNo" resultMap="diaryResultMap">
        SELECT d.*, u.user_no, u.user_id, u.nickname, u.profile_image_path,
        w.webtoon_no, w.webtoon_id, w.platform, w.webtoon_name, w.author, w.thumbnail_url, w.genre, w.tags,
        (SELECT COUNT(*) FROM so_diary_comments WHERE diary_no = d.diary_no) as comment_count
        FROM so_diary d
        JOIN users u ON d.writer_no = u.user_no
        JOIN webtoon w ON d.webtoon_no = w.webtoon_no
        WHERE d.diary_no = #{diaryNo}
    </select>
    <!-- 다이어리 상세 조회: 조회수 증가 -->
    <update id="incrementDiaryViewCount">
        UPDATE so_diary
        SET view_cnt = view_cnt + 1
        WHERE diary_no = #{diaryNo}
    </update>

    <!-- 다이어리 수정 -->
    <update id="updateDiary" parameterType="diaryDTO">
        UPDATE so_diary
        SET title = #{title},
        content = #{content},
        status_code = #{statusCode},
        modified_date = NOW()
        WHERE diary_no = #{diaryNo}
    </update>

    <!-- 다이어리 삭제 -->
    <delete id="deleteDiary" parameterType="int">
        DELETE FROM so_diary
        WHERE diary_no = #{diaryNo}
    </delete>

    <!-- 다이어리 댓글 조회-->
    <select id="selectDiaryComments" parameterType="int" resultMap="diaryCommentResultMap">
        SELECT c.*, u.user_no, u.user_id, u.nickname, u.profile_image_path
        FROM so_diary_comments c
        JOIN users u ON c.commenter_no = u.user_no
        WHERE c.diary_no = #{diaryNo}
        ORDER BY c.created_date ASC
    </select>
    <!-- 다이어리 댓글 조회: 특정 댓글 번호 -->
    <select id="selectDiaryCommentByNo" parameterType="int" resultMap="diaryCommentResultMap">
        SELECT c.*, u.user_no, u.user_id, u.nickname, u.profile_image_path
        FROM so_diary_comments c
        JOIN users u ON c.commenter_no = u.user_no
        WHERE c.comment_no = #{commentNo}
    </select>
    <!-- 다이어리 댓글 조회: 사용자가 작성한 가장 최근 댓글 조회 -->
    <select id="selectLastInsertedComment" resultMap="diaryCommentResultMap">
        SELECT c.*, u.user_no, u.user_id, u.nickname, u.profile_image_path
        FROM so_diary_comments c
        JOIN users u ON c.commenter_no = u.user_no
        WHERE c.diary_no = #{diaryNo} AND c.commenter_no = #{userNo}
        ORDER BY c.comment_no DESC
        LIMIT 1
    </select>

    <!-- 다이어리 댓글 작성 -->
    <insert id="insertDiaryComment" parameterType="diaryCommentDTO">
        INSERT INTO so_diary_comments (diary_no, commenter_no, content)
        VALUES (#{diaryNo}, #{commenter.userNo}, #{content})
    </insert>

    <!-- 다이어리 댓글 삭제 -->
    <delete id="deleteDiaryComment" parameterType="int">
        DELETE FROM so_diary_comments
        WHERE comment_no = #{commentNo}
    </delete>
</mapper>
